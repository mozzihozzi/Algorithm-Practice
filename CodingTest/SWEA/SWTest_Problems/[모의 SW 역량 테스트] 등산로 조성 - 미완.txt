// SW Expert Academy - Problem. 1949 : [모의 SW 역량 테스트] 등산로 조성
// 경로 DP
#include <iostream>
#include <vector>
#include <functional>
#include <queue>

using namespace std;

int arr_height[8][8];			//초기 배열 저장
bool arr_check[8][8];			//등산로 상태 체크
int arr_longestWay[64];			//거리 배열 저장

bool index_check(int i, int j, int N)
{
	if ((i >= 0) && (i < N) && (j >= 0) && (j < 0))
		return 1;
	else
		return 0;
}


int main(void){
	int N, K, T;								//N : 지도 한변의 길이 | K : 팔수 있는 최대 깊이 | T : 테스트 케이스 갯수
	int iT= 1, iN, jN, iH, iK;					//iT : 테스트케이스 T에 대한 반복연산자 | iN, jN : 배열 길이 N에 대한 반복연산자
	int temp, result, highest_height, lowest_height, currentCost;
	bool check_K = 0;							//0이면 아직 안팜, 1이면 이미 팠음

	scanf("%d", &T);

	while (iT <= T){
		result = highest_height = 0;
		lowest_height = 20;

		scanf("%d %d", &N, &K);
		for (iN = 0; iN < N; iN++){
			for (jN = 0; jN < N; jN++){
				scanf("%d",&arr_height[iN][jN]);
				temp = arr_height[iN][jN];			//최고 높이를 찾아서 저장해 놓음
				if (temp > highest_height)
					highest_height = temp;
				if (temp < lowest_height)
					lowest_height = temp;
			}
		}
		
		//최고 높이 위치를 뽑아서 vector에 저장
		vector<pair<int,int>> highest_index;
		for (iN = 0; iN < N; iN++){
			for (jN = 0; jN < N; jN++){
				if (arr_height[iN][jN] == highest_height){
					highest_index.push_back({iN,jN});
				}
			}
		}

		priority_queue < vector<int, vector<int, int>> > pq;
		//최고 위치에서 경로 탐색
		for (iH = 0; iH < highest_index.size(); iH++)
		{
			for (int i = 0; i < N; i ++){
				for (int j = 0; j < N; j++){
					for (iK = 0; iK <= K; iK++){
						if ( arr_height[i][j] != lowest_height ){
							arr_height[i][j] -= iK;
							fill(arr_longestWay, arr_longestWay + N*N, 0);
							fill(arr_check, arr_check + N*N, 0);
							pq.push({ 1, highest_index[iH].first, highest_index[iH].second });
							arr_longestWay[iN*(N)+jN] = 1;

							while (pq.empty()){
								iN = pq.top()[1];
								jN = pq.top()[2];
								currentCost = pq.top()[0];
								pq.pop();
								arr_check[iN][jN] = 1;

								if (currentCost > result)
									result = currentCost;

								//좌, 우, 상, 하
								if (index_check(iN - 1, jN, N) && (arr_height[iN - 1][jN] < arr_height[iN][jN]) && !arr_check[iN - 1][jN])
								{
									pq.push({ currentCost + 1, --iN, jN });
								}
								if (index_check(iN + 1, jN, N) && (arr_height[iN + 1][jN] < arr_height[iN][jN]) && !arr_check[iN + 1][jN])
								{
									pq.push({ currentCost + 1, ++iN, jN });
								}
								if (index_check(iN, jN + 1, N) && (arr_height[iN][jN + 1] < arr_height[iN][jN]) && !arr_check[iN][jN + 1])
								{
									pq.push({ currentCost + 1, iN, ++jN });
								}
								if (index_check(iN, jN - 1, N) && (arr_height[iN][jN - 1] < arr_height[iN][jN]) && !arr_check[iN][jN - 1])
								{
									pq.push({ currentCost + 1, iN, --jN });
								}
							}
							arr_height[i][j] += iK;
						}
					}
				}
			}
		}

		printf("#%d %d\n", iT, result);

		iT++;
	}
	return 0;
}
