// SW Expert Academy - Problem. 2383 : [모의 SW 역량 테스트] 점심 식사시간
// simulation 문제
#include <iostream>
#include <string.h>
#include <queue>

using namespace std;

typedef struct PersonInfo{
	int pos[2];					//사람 위치 x,y
	bool choose_stair;			//계단 선택, 0번 or 1번
	int state;					//2 -> 1 -> 0
	int cnt;
}pInfo;

typedef struct StairInfo{
	int pos[2];					//계단 위치 x, y
	int time;					//계단에서 있는 시간
	int personIdx[3];			//계단에 있는 사람 index
}sInfo;

int T, N, P, S;

int iT, iN, jN;
int result;

pInfo personInfo[10];
sInfo stairInfo[2];

int simulate(){
	int t, cntP = 0;

	pInfo cpyPerson[10];
	memcpy(cpyPerson, personInfo, sizeof(pInfo) * 10);
	sInfo cpyStair[2];
	memcpy(cpyStair, stairInfo, sizeof(sInfo) * 2);

	queue<int> waitingList[2];

	for (t = 1; cntP != P; t++){
		if (t > result){
			return -1;
		}

		//계단 내려가기
		int idx;
		for (int s = 0; s < S; s++){
			for (int i = 0; i < 3; i++){
				idx = cpyStair[s].personIdx[i];
				if (idx != -1){
					cpyPerson[idx].cnt++;
					if (cpyPerson[idx].cnt == cpyStair[s].time){
						cpyPerson[idx].state = 0;
						cntP++;
						cpyStair[s].personIdx[i] = -1;
					}
				}
			}
		}

		//이동
		int sIdx;
		for (int iP = 0; iP < P; iP++){
			sIdx = cpyPerson[iP].choose_stair;
			if (cpyPerson[iP].pos[0] < cpyStair[sIdx].pos[0]){
				cpyPerson[iP].pos[0]++;
			}
			else if (cpyPerson[iP].pos[0] > cpyStair[sIdx].pos[0]){
				cpyPerson[iP].pos[0]--;
			}
			else if (cpyPerson[iP].pos[1] < cpyStair[sIdx].pos[1]){
				cpyPerson[iP].pos[1]++;
			}
			else if (cpyPerson[iP].pos[1] > cpyStair[sIdx].pos[1]){
				cpyPerson[iP].pos[1]--;
			}

			if (cpyPerson[iP].pos[0] == cpyStair[sIdx].pos[0] && cpyPerson[iP].pos[1] == cpyStair[sIdx].pos[1] && cpyPerson[iP].state == 2){
				cpyPerson[iP].state = 1;
				waitingList[sIdx].push(iP);
			}
		}

		//대기자 확인
		for (int i = 0; i < 2; i++){
			for (int j = 0; j < 3; j++){
				if (cpyStair[i].personIdx[j] == -1 && !waitingList[i].empty()){
					cpyStair[i].personIdx[j] = waitingList[i].front();
					waitingList[i].pop();
				}
			}
		}

	}

	return t;
}


void dfs(int num){
	if (num == P){
		int time = simulate();
		if (result > time && time != -1){
			result = time;
		}
		return;
	}

	personInfo[num].choose_stair = 0;
	dfs(num + 1);

	personInfo[num].choose_stair = 1;
	dfs(num + 1);
	personInfo[num].choose_stair = 0;
}

int main(void){
	freopen("sample_input_2383.txt", "r", stdin);

	scanf("%d", &T);
	for (iT = 1; iT <= T; iT++){
		scanf("%d", &N);

		int temp;
		P = 0, S = 0;
		for (iN = 0; iN < N; iN++){
			for (jN = 0; jN < N; jN++){
				scanf("%d", &temp);
				if (temp == 1){
					personInfo[P].pos[0] = jN;
					personInfo[P].pos[1] = iN;
					personInfo[P].choose_stair = 0;
					personInfo[P].state = 2;
					personInfo[P].cnt = 0;
					P++;
				}
				else if (temp > 1){
					stairInfo[S].pos[0] = jN;
					stairInfo[S].pos[1] = iN;
					stairInfo[S].time = temp;
					stairInfo[S].personIdx[0] = -1;
					stairInfo[S].personIdx[1] = -1;
					stairInfo[S].personIdx[2] = -1;
					S++;
				}
			}
		}

		result = 50;
		dfs(0);

		printf("#%d %d\n", iT, result);
	}

	return 0;
}