// SW Expert Academy - Problem. 1949 : [모의 SW 역량 테스트] 등산로 조성
// 경로 DP
#include <iostream>
#include <vector>
#include <functional>
#include <queue>

using namespace std;

int arr_height[8][8];			//초기 배열 저장
bool arr_check[8][8];			//등산로 상태 체크

//상하좌우 순임
int dir[4][2] = { { -1, 0 }, { 1, 0 }, { 0, -1 }, { 0, 1 } };

int N, K, T;	//N : 지도 한변의 길이 | K : 팔수 있는 최대 깊이 | T : 테스트 케이스 갯수
int iT = 1, iN, jN, iH, iK;		

int result, highest_height, lowest_height;
bool Flag;


bool index_check(int y, int x)
{
	if ((x >= 0) && (x < N) && (y >= 0) && (y < N)){
		if (arr_check[y][x] == 0){
			return true;
		}
	}

	return false;
}

void dfs(int y, int x, int length){
	//if (index_check(y, x)) { return; }
	
	for (int i = 0; i < 4; i++){
		int ny = y + dir[i][0];
		int nx = x + dir[i][1];

		if (index_check(ny, nx)) { continue; }
		else{
			if (Flag == 0){		//판 적이 없다면 벽을 뚫어 봐야 함
				arr_check[ny][nx] = true;
				dfs(ny, nx, length + 1);
				arr_check[ny][nx] = false;
			}
			else {				//판 적이 있으면 그냥 진행

				arr_check[ny][nx] = true;
				dfs(ny, nx, length + 1);
				arr_check[ny][nx] = false;

			}
		}
	}






}


int main(void){

	scanf("%d", &T);

	while (iT <= T){
		result = highest_height = 0;
		lowest_height = 20;

		scanf("%d %d", &N, &K);
		int temp;
		for (iN = 0; iN < N; iN++){
			for (jN = 0; jN < N; jN++){
				scanf("%d", &arr_height[iN][jN]);
				temp = arr_height[iN][jN];			//최고 높이를 찾아서 저장해 놓음
				if (temp > highest_height)
					highest_height = temp;
				if (temp < lowest_height)
					lowest_height = temp;
			}
			memset(arr_check[iN],false,sizeof(bool)*N);
		}

		//최고 높이 위치를 뽑아서 vector에 저장
		vector<pair<int, int>> highest_index;
		for (iN = 0; iN < N; iN++){
			for (jN = 0; jN < N; jN++){
				if (arr_height[iN][jN] == highest_height){
					highest_index.push_back({ iN, jN });
				}
			}
		}

		//최고 위치에서 경로 탐색
		for (iH = 0; iH < highest_index.size(); iH++)
		{
			arr_check[highest_index[iH].first][highest_index[iH].second] = true;
			dfs(highest_index[iH].first, highest_index[iH].second, 1);
			arr_check[highest_index[iH].first][highest_index[iH].second] = false;
		}

		printf("#%d %d\n", iT, result);

		iT++;
	}
	return 0;
}
