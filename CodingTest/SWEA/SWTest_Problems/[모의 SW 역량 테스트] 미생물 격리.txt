// SW Expert Academy - Problem. 2382 : [모의 SW 역량 테스트] 미생물 격리
// simulation 문제
#include <cstdio>
#include <algorithm>
#include <string.h>
#include <vector>

using namespace std;

typedef struct micron{
	int pos[2];		//위치 pos[0] : 세로, pos[1] : 가로
	int direction;	//움직이는 방향, 1: 상, 2:하, 3: 좌, 4:우
	int number;		//미생물의 수
}Micron;

int direction[4][2] = { { -1, 0 }, { 1, 0 }, {0, -1}, {0, 1} };
int check_micro[100][100];
vector<Micron> micronVect;
vector<int> indexVect;

int change_direction(int direction)
{
	switch (direction)
	{
	case 1:
		return 2;
	case 2:
		return 1;
	case 3:
		return 4;
	case 4:
		return 3;
	}
}

void merge_micron(int y, int x)
{
	int i;
	int max_number = 0, max_index;
	indexVect.clear();
	//겹치는 미생물들의 vector index를 저장
	for (i = 0; i < micronVect.size(); i++){
		if ((micronVect[i].pos[0] == y) && (micronVect[i].pos[1] == x) && micronVect[i].number != 0){
			if (max_number < micronVect[i].number){
				max_number = micronVect[i].number;
				max_index = i;
			}
			indexVect.push_back(i);
		}
	}
	
	for (i = 0; i < indexVect.size(); i++){
		if (indexVect[i] != max_index){
			micronVect[max_index].number += micronVect[indexVect[i]].number;
			micronVect[indexVect[i]].number = 0;
			check_micro[micronVect[indexVect[i]].pos[0]][micronVect[indexVect[i]].pos[1]] -= 1;
		}
	}
	
}

int main(void){
	int T, N, M, K;			// T: 테스트 케이스, N : 배열 길이, M : 격리 시간, K : 미생물 군집의 수

	int iT, iN, jN, iM, iK;					// 반복문에 쓰이는 변수들
	int x, y;
	int result;
	Micron tempMicron;
	scanf("%d", &T);

	for (iT = 1; iT <= T; iT++){
		scanf("%d %d %d", &N, &M, &K);
		//체크용 배열 초기화
		micronVect.clear();
		for (iN = 0; iN < N; iN++){
			memset(check_micro, 0, sizeof(int)*N);
		}
		for (iK = 0; iK < K; iK++){
			scanf("%d %d %d %d",&tempMicron.pos[0], &tempMicron.pos[1], &tempMicron.number, &tempMicron.direction);
			micronVect.push_back(tempMicron);
			check_micro[tempMicron.pos[0]][tempMicron.pos[1]] = 1;
		}

		//M의 시간에 대해서 반복
		for (iM = 0; iM < M; iM++){
			//한셀 씩 이동, 그리고 이동할 때 벽이랑 만나면 개체수 /2 , 방향 바꾸기
			int size = micronVect.size();
			for (iK = 0; iK < size; iK++){
				if (micronVect[iK].number > 0){
					check_micro[micronVect[iK].pos[0]][micronVect[iK].pos[1]] -= 1;
					micronVect[iK].pos[0] += direction[micronVect[iK].direction - 1][0];
					micronVect[iK].pos[1] += direction[micronVect[iK].direction - 1][1];
					check_micro[micronVect[iK].pos[0]][micronVect[iK].pos[1]] += 1;

					//벽 만났는지 체크
					if ((micronVect[iK].pos[0] == 0) || (micronVect[iK].pos[0] == N - 1) || (micronVect[iK].pos[1] == 0) || (micronVect[iK].pos[1] == N - 1)){
						micronVect[iK].number = micronVect[iK].number / 2;
						micronVect[iK].direction = change_direction(micronVect[iK].direction);
						if (micronVect[iK].number == 0){
							check_micro[micronVect[iK].pos[0]][micronVect[iK].pos[1]] -= 1;	// 수정
						}
					}
				}
			}
			//겹치는지 체크
			for (iN = 1; iN < N - 1; iN++){
				for (jN = 1; jN < N - 1; jN++){
					// 겹치는 녀석이 있을 때에 미생물 군집을 합침
					if (check_micro[iN][jN] >= 2){
						merge_micron(iN, jN);
					}
				}
			}
		}

		//마지막 남아있는 미생물 군집에 대해서 총 갯수 구하기
		result = 0;
		for (iK = 0; iK < micronVect.size(); iK++){
			result += micronVect[iK].number;
		}
		
		printf("#%d %d\n",iT, result);
	}

	return 0;
}
