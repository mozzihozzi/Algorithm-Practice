//Baekjoon - 14503 : 로봇 청소기

#include <iostream>
#include <vector>
#include <queue>
using namespace std;
int N, M, R, C, D, result;
int map[50][50];
int dir[4][2] = { { -1, 0 }, { 0, 1 }, { 1, 0 }, { 0, -1 } };


void simulate(){
	queue<pair<pair<int, int>, int>> routeQ;
	result = 0;
	routeQ.push({ { R, C }, D });


	while (!routeQ.empty()){
		int y = routeQ.front().first.first;
		int x = routeQ.front().first.second;
		int currentDir = routeQ.front().second;

		if (map[y][x] == 0){
			map[y][x] = 2;
			result++;
		}
		routeQ.pop();

		for (int i = currentDir - 1, j = 4; j >= 0; i--, j--){
			if (j == 0){ //후진
				int nx = x + dir[currentDir][1] * (-1);
				int ny = y + dir[currentDir][0] * (-1);


				if (map[ny][nx] != 1){
					routeQ.push({ { ny, nx }, currentDir });
				}
				else if (map[ny][nx] == 1){
					return;
				}
			}
			else { //방향 돌리기
				if (i < 0){
					i = 3;
				}
				int ny = y + dir[i][0];
				int nx = x + dir[i][1];

				if (ny >= 0 && ny < N  && nx >= 0 && nx < M){
					if (map[ny][nx] == 0){
						routeQ.push({ { ny, nx }, i });
						break;
					}
				}
			}
		}
	}

}

int main(void) {
	scanf("%d %d", &N, &M);
	scanf("%d %d %d", &R, &C, &D);
	for (int i = 0; i < N; i++){
		for (int j = 0; j < M; j++){
			scanf("%d", &map[i][j]);
		}
	}

	simulate();

	printf("%d", result);

	return 0;
}