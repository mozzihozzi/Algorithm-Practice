//Baekjoon - 13460 : 구슬 탈출 2
#include <iostream>

using namespace std;

int N, M, T;
int result;
int dir[4][2] = { { 0, 1 }, { 0, -1 }, { 1, 0 }, { -1, 0 }, };	//우 좌 하 상
int pos[2][2]; // r, b 좌표 / y, x
int posO[2]; // 출구 좌표 / y, x
char box[10][10]; //박스 맵

void move(int command, int sel){
	while (true){
		int ny = pos[sel][0] + dir[command][0];
		int nx = pos[sel][1] + dir[command][1];

		if (box[ny][nx] != '#'){
			pos[sel][0] = ny;
			pos[sel][1] = nx;

			if (box[ny][nx] == 'O'){
				return;
			}
			else if ((pos[0][0] == pos[1][0]) && (pos[0][1] == pos[1][1])){
				pos[sel][0] -= dir[command][0];
				pos[sel][1] -= dir[command][1];
				return;
			}
		}
		else {
			return;
		}
	}
}

void dfs(int cnt){
	//중단점
	if (cnt > 10 || (pos[0][0] == posO[0] && pos[0][1] == posO[1])){
		if (result > cnt && (pos[1][0] != posO[0] || pos[1][1] != posO[1]) ){
			result = cnt;
		}
		return;
	}

	if (pos[1][0] == posO[0] && pos[1][1] == posO[1]){
		return;
	}

	int posPrev[2][2] = { { pos[0][0], pos[0][1] }, { pos[1][0], pos[1][1] } };
	for (int i = 0; i < 4; i++){
		int nyR = pos[0][0] + dir[i][0];
		int nxR = pos[0][1] + dir[i][1];
		int nyB = pos[1][0] + dir[i][0];
		int nxB = pos[1][1] + dir[i][1];
		if ((nxR >= 0 && nxR < M && nyR >= 0 && nyR < N) || (nxB >= 0 && nxB < M && nyB >= 0 && nyB < N)){
			if (box[nyR][nxR] == '.' || box[nyR][nxR] == 'O' || box[nyB][nxB] == '.' || box[nyB][nxB] == 'O'){
				//구슬 이동
				if (i == 0){	//우
					if (pos[0][0] < pos[1][0]){
						move(i, 1);
						move(i, 0);
					}
					else{
						move(i, 0);
						move(i, 1);
					}
				}
				else if (i == 1){ //좌
					if (pos[0][0] > pos[1][0]){
						move(i, 1);
						move(i, 0);
					}
					else{
						move(i, 0);
						move(i, 1);
					}
				}
				else if (i == 2){ // 하
					if (pos[0][1] < pos[1][1]){
						move(i, 1);
						move(i, 0);
					}
					else{
						move(i, 0);
						move(i, 1);
					}
				}
				else if (i == 3){ // 상
					if (pos[0][1] > pos[1][1]){
						move(i, 1);
						move(i, 0);
					}
					else{
						move(i, 0);
						move(i, 1);
					}
				}
				dfs(cnt + 1);
				//구슬 복귀
				pos[0][0] = posPrev[0][0];
				pos[0][1] = posPrev[0][1];
				pos[1][0] = posPrev[1][0];
				pos[1][1] = posPrev[1][1];
			}
		}
	}
}

int main(void){
	freopen("baejoon_13460.txt", "r", stdin);

	scanf("%d", &T);

	for (int iT = 0; iT < T; iT++){
		scanf("%d %d\n", &N, &M);

		for (int i = 0; i < N; i++){
			for (int j = 0; j < M; j++){
				scanf("%c", &box[i][j]);
				if (box[i][j] == 'R'){
					pos[0][0] = i;
					pos[0][1] = j;
				}
				else if (box[i][j] == 'B'){
					pos[1][0] = i;
					pos[1][1] = j;
				}
				else if (box[i][j] == 'O'){
					posO[0] = i;
					posO[1] = j;
				}
			}
			scanf("\n");
		}

		result = 11;
		dfs(0);
		(result > 10) ? printf("%d\n", -1) : printf("%d\n", result);
	}

	return 0;
}