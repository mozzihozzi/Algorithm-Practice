//Baekjoon - 14502 : 연구소

#include <iostream>
#include <cstring>
#include <vector>
#include <queue>
using namespace std;
int N, M;

int result, cnt;
int map[8][8];
bool check[8][8];
int dir[4][2] = { { -1, 0 }, { 1, 0 }, { 0, -1 }, { 0, 1 } };
vector<pair<int, int>> virus;

void virusDiffusion(vector<pair<int,int>> &wallList) {
	queue<pair<int, int>> vq;
	int copymap[8][8];
	memcpy(copymap, map, sizeof(int) * 8 * 8);
	//바이러스 위치 넣기
	for (int i = 0; i < virus.size(); i++){
		vq.push({ virus[i].first, virus[i].second });
	}
	//
	for (int i = 0; i < wallList.size(); i++){
		copymap[wallList[i].first][wallList[i].second] = 1;
	}

	while (!vq.empty()){
		int y = vq.front().first;
		int x = vq.front().second;
		vq.pop();

		for (int i = 0; i < 4; i++){
			int ny = y + dir[i][0];
			int nx = x + dir[i][1];

			if (nx >= 0 && nx < M && ny >= 0 && ny < N){
				if (copymap[ny][nx] == 0){
					copymap[ny][nx] = 2;
					vq.push({ny,nx});
				}
			}
		}
	}
	cnt = 0;
	for (int i = 0; i < N; i++){
		for (int j = 0; j < M; j++){
			if (copymap[i][j] == 0){
				cnt++;
			}
		}
	}
}


void simulate(int y, int x, vector<pair<int, int>> wallList){
	if (wallList.size() == 3){
		virusDiffusion(wallList);
		if (result < cnt){
			result = cnt;
		}
		return;
	}

	if (x < 0 || x >= M || y < 0 || y >= N) {
		return;
	}


	if (map[y][x] == 0){
		//벽 세웠을 때
		wallList.push_back({y,x});
		if (x == M - 1){
			simulate(y + 1, 0, wallList);
		}
		else {
			simulate(y, x + 1, wallList);
		}
		wallList.pop_back();
	}
	//벽 안세웠을 때
	if (x == M - 1){
		simulate(y + 1, 0, wallList);
	}
	else {
		simulate(y, x + 1, wallList);
	}


}

int main(void) {
	scanf("%d %d", &N, &M);
	//상담날짜, 금액
	for (int i = 0; i < N; i++) {
		for (int j = 0; j < M; j++) {
			scanf("%d", &map[i][j]);
			if (map[i][j] == 2){
				virus.push_back({i,j});
			}
		}
	}

	result = 0;
	vector<pair<int, int>> wallList;
	simulate(0, 0, wallList);


	printf("%d", result);

	return 0;
}