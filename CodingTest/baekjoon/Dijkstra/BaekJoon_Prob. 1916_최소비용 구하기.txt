// BaekJoon - Problem. 1916 : 최소비용 구하기
// Dijkstra Practice 2
#include <iostream>
#include <functional>
#include <vector>
#include <queue>

#define INF 1e9

using namespace std;

int main(void){
	int N, M;				//N : 도시의 개수,  M : 버스의 개수
	scanf("%d", &N);
	scanf("%d", &M);
	
	//edge 정보 : edges, 최소 비용 : lowest_cost, Priority Queue : pq
	vector<pair<int, int> > edges[1001];
	int lowestCost[1001];
	
	//edge정보 저장			//S : 출발 도시, D : 도착 도시
	int from, to, cost;		//edge정보,  from -> to, 비용은 cost
	int i;
	for (i = 0; i < M; i++){
		scanf("%d %d %d", &from, &to, &cost);
		edges[from].push_back({ to, cost });
	}
	
	int start, destination;
	scanf("%d %d", &start, &destination);

	//출발 비용 초기화
	priority_queue < pair<int, int>, vector<pair<int, int> >, greater<pair<int, int> > > pq;
	fill(lowestCost, lowestCost + N + 1, INF);
	pq.push({ 0, start });
	lowestCost[start] = 0;

	int currentCost, nextCost;
	int current, next;
	while (!pq.empty()){
		currentCost = pq.top().first;
		current = pq.top().second;
		pq.pop();

		for (i = 0; i < edges[current].size(); i++){
			next = edges[current][i].first;
			nextCost = edges[current][i].second;
			if (lowestCost[next] > lowestCost[current] + nextCost){
				lowestCost[next] = lowestCost[current] + nextCost;
				pq.push({ lowestCost[next], next });
			}
		}
	}

	//결과 출력
	printf("%d", lowestCost[destination]);
	
	return 0;
}
