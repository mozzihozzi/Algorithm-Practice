#include <string>
#include <vector>
#include <algorithm>

using namespace std;


bool compare(pair<int, int> a, pair<int, int> b){
	return a.second < b.second;
}

int solution(vector<int> food_times, long long k){
	int answer = 0;
	unsigned long long t = 0;
	vector<pair<int, int>> idxList;
	for (int i = 0; i < food_times.size(); i++){
		idxList.push_back({ food_times[i], i + 1 });
	}

	sort(idxList.begin(), idxList.end());

	int arrIdx = 0, currentIdx, tempIdx;
	long long ct, prevVal = 0;
	while (arrIdx < food_times.size()){
		ct = food_times.size() - arrIdx;

		if (ct*(idxList[arrIdx].first - prevVal) > k){
			sort(idxList.begin() + arrIdx, idxList.end(), compare);
			return (long long)idxList[(k % ct) + arrIdx].second;
		}

		for (tempIdx = arrIdx; idxList[arrIdx].first == idxList[tempIdx].first; tempIdx++){

		}
		k -= (idxList[arrIdx].first - prevVal) * ct;
		prevVal = idxList[arrIdx].first;
		arrIdx = tempIdx;

	}

	return -1;
}