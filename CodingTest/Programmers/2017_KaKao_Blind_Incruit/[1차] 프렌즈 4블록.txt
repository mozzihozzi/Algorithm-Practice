//(2017년)KAKAO BLIND RECRUITMENT : [1차] 프렌즈 4블록
//벽돌깨기 문제, 9점
#include <string>
#include <vector>

using namespace std;

int solution(int m, int n, vector<string> board) {
	int answer = 0;
	
	while (1){
		int cnt = 0;
		char current;
		bool map[30][30] = { };
		//모든 블럭에 대해서 깰 벽돌들을 다 표시함
		for (int i = 0; i < m - 1; i++){
			for (int j = 0; j < n - 1; j++){
				//오른쪽 아래쪽으로만 탐색
				current = board[i][j];
				if (current != 'X'){
					if (current == board[i + 1][j] && current == board[i][j + 1] && current == board[i + 1][j + 1]){
						if (map[i][j] == false){
							cnt++;
							map[i][j] = true;
						}
						if (map[i][j + 1] == false){
							cnt++;
							map[i][j + 1] = true;
						}
						if (map[i + 1][j] == false){
							cnt++;
							map[i + 1][j] = true;
						}
						if (map[i + 1][j + 1] == false){
							cnt++;
							map[i + 1][j + 1] = true;
						}
					}
				}
			}
		}
		//만약 지울게 없으면 반복문 종료
		if (cnt == 0){
			break;
		}

		//
		for (int i = 0; i < m; i++){
			for (int j = 0; j < n; j++){
				if (map[i][j] == true){
					board[i][j] = 'X';
				}
			}
		}

		//블럭 바꾸기
		for (int j = 0; j < n; j++){
			string temp = "";
			for (int i = m - 1; i >= 0; i--){
				if (board[i][j] != 'X'){
					temp += board[i][j];
				}
			}

			for (int i = 0; i < m; i++){
				if (i < temp.size() ){
					board[m - 1 - i][j] = temp[i];
				}
				else {
					board[m - 1 - i][j] = 'X';
				}
			}
		}

		answer += cnt;

	}


	return answer;
}